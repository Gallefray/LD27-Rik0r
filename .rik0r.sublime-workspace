{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"scr",
				"scrHeight"
			],
			[
				"star",
				"stars"
			],
			[
				"move",
				"moveRad"
			],
			[
				"orig",
				"origY"
			],
			[
				"circ",
				"pointCircleCollision"
			],
			[
				"arg",
				"argv"
			],
			[
				"ge",
				"GetNextAvailableEnemy"
			],
			[
				"enem",
				"enemies"
			],
			[
				"ene",
				"enemies"
			],
			[
				"gun",
				"gunY"
			],
			[
				"s",
				"sheilds"
			],
			[
				"max",
				"maxBullets"
			],
			[
				"brea",
				"breakScreen"
			],
			[
				"tt",
				"titleUpdate"
			],
			[
				"tit",
				"titleDraw"
			],
			[
				"load",
				"loadNextLevel"
			],
			[
				"menu",
				"menuScreen"
			],
			[
				"draw",
				"drawImage"
			],
			[
				"TIT",
				"titleDraw"
			],
			[
				"break",
				"breakScreen"
			],
			[
				"leve",
				"loadNextLevel"
			],
			[
				"bre",
				"breakUpdate"
			],
			[
				"gen",
				"genPowerup"
			],
			[
				"dea",
				"deathScore"
			],
			[
				"level",
				"levelScore"
			],
			[
				"enemy",
				"enemyAlive"
			],
			[
				"tar",
				"targetAngle"
			],
			[
				"rad",
				"degreesToRadians"
			],
			[
				"gu",
				"gunAngle"
			],
			[
				"bull",
				"bulletCount"
			],
			[
				"bullet",
				"bulletCount"
			],
			[
				"G",
				"gunY"
			],
			[
				"p",
				"player"
			],
			[
				"targ",
				"targAngle"
			],
			[
				"full",
				"fullscreen"
			],
			[
				"def",
				"define"
			],
			[
				"org",
				"origY"
			],
			[
				"or",
				"origX"
			],
			[
				"ori",
				"origY"
			],
			[
				"copy",
				"copySurface"
			],
			[
				"img",
				"imgType"
			],
			[
				"QL",
				"QLimage"
			],
			[
				"type",
				"typedef"
			],
			[
				"im",
				"imgType"
			],
			[
				"mouse",
				"mouseInput"
			],
			[
				"de",
				"default"
			],
			[
				"lef",
				"leftButton"
			],
			[
				"rand",
				"randomNum"
			],
			[
				"set",
				"setColour"
			],
			[
				"st",
				"strcmp"
			],
			[
				"time",
				"timeDelta"
			],
			[
				"delta",
				"deltaTime"
			],
			[
				"fps",
				"FPSUpdateFreq"
			],
			[
				"frame",
				"framesRendered"
			],
			[
				"fr",
				"framesRendered"
			],
			[
				"an",
				"angle"
			],
			[
				"in",
				"inc	#include \"â€¦\""
			],
			[
				"want",
				"wantedDrawTime"
			],
			[
				"scrT",
				"scrTransY"
			],
			[
				"line",
				"lineWidth"
			],
			[
				"scrTrans",
				"scrTransX"
			],
			[
				"scrTr",
				"scrTransX"
			],
			[
				"trans",
				"transPY"
			],
			[
				"screen",
				"screenW"
			],
			[
				"re",
				"rectThere"
			],
			[
				"T",
				"TAB"
			],
			[
				"key",
				"keyInput"
			],
			[
				"SDL_",
				"SDL_QUIT"
			],
			[
				"co",
				"cos	constant string"
			],
			[
				"d",
				"dir"
			],
			[
				"res",
				"respdata"
			],
			[
				"marg",
				"margin"
			],
			[
				"margin",
				"margin-top"
			],
			[
				"padding",
				"padding-top"
			],
			[
				"tex",
				"text-decoration"
			],
			[
				"font",
				"font-size"
			],
			[
				"margin-",
				"margin-top"
			],
			[
				"ma",
				"margin-top"
			],
			[
				"width",
				"min-width"
			],
			[
				"paddi",
				"padding-left"
			],
			[
				"image",
				"background-image"
			],
			[
				"pading",
				"padding-top"
			],
			[
				"light",
				"lightbox"
			],
			[
				"bak",
				"background-color"
			],
			[
				"background",
				"background-color"
			],
			[
				"colo",
				"background-color"
			],
			[
				"lightbo",
				"lightboxIsOn"
			],
			[
				"main",
				"mainCount"
			],
			[
				"fo",
				"font-style"
			],
			[
				"pa",
				"padding-left"
			],
			[
				"text",
				"text-align"
			],
			[
				"right",
				"rightCont"
			],
			[
				"border-top",
				"border-top-right-radius"
			],
			[
				"border",
				"border-radius"
			],
			[
				"mar",
				"margin-left"
			],
			[
				"lightBox",
				"lightboxUpd"
			],
			[
				"setD",
				"love.graphics.setMode"
			],
			[
				"ke",
				"love.keyboard.isDown"
			],
			[
				"randGen",
				"randGenPlanets"
			],
			[
				"dialog",
				"dialogOn"
			],
			[
				"recta",
				"love.graphics.rectangle"
			],
			[
				"str",
				"strRemLastChar"
			],
			[
				"player",
				"player_tile"
			],
			[
				"EDITtele",
				"EDITteleptReciv"
			],
			[
				"EDITte",
				"EDITteleptReciv"
			],
			[
				"moveS",
				"moveSpeed"
			],
			[
				"selec",
				"selection"
			],
			[
				"selection",
				"selectionText"
			],
			[
				"conv",
				"convBelt"
			],
			[
				"print",
				"printF"
			],
			[
				"block",
				"blockSize"
			],
			[
				"r",
				"love.run"
			],
			[
				"dirTh",
				"dirThree"
			],
			[
				"dirTw",
				"dirTwo"
			],
			[
				"telept",
				"teleptReciv"
			],
			[
				"retun",
				"returnTable"
			],
			[
				"carry",
				"carryBox"
			],
			[
				"setPo",
				"love.mouse.setPosition"
			],
			[
				"return",
				"returnTable"
			],
			[
				"play",
				"playerMove"
			],
			[
				"isD",
				"love.mouse.isDown"
			],
			[
				"rect",
				"love.graphics.rectangle"
			],
			[
				"rec",
				"love.graphics.rectangle"
			],
			[
				"min",
				"min-width"
			],
			[
				"list",
				"list-style-position"
			],
			[
				"tet",
				"text-decoration"
			],
			[
				"aY",
				"aY"
			],
			[
				"box",
				"box1"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#include \"QL.h\"\n\n#define maxBullets 10000\n#define maxEnemy 20\n\ntypedef struct\n{\n	bool active;\n	int x, y;\n	float moveAng; int moveRad;\n	int moveSpeed;\n	int origX, origY;\n} bullet;\n\ntypedef struct\n{\n	bool active;\n	int x, y, r;\n	int gunX, gunY, gunR;\n	float gunAngle;\n	int moveSpeed;\n	int sheilds;\n	bullet bullets[maxBullets];\n} hero;\n\ntypedef struct\n{\n	bool active;\n	int x, y, r;\n	float targAngle, moveAngle;\n	int moveSpeed;\n	int sheilds;\n} zomb;\n\ntypedef struct\n{\n	bool active;\n	int x, y, r;\n	int repair;\n} powerUp;\n\nint level = 1;\nhero player;\nzomb enemies[maxEnemy];\n\nbullet *GetNextAvailableBullet()\n{\n	int i;\n	for(i = 0; i < maxBullets; i++) \n	{ \n		if (player.bullets[i].active) \n		{\n			continue;\n		}\n		return player.bullets + i;\n	} \n	return NULL;\n}\n\nzomb *GetNextAvailableEnemy()\n{\n	int i;\n	for(i = 0; i < maxEnemy; i++) \n	{ \n		if (enemies[i].active) \n		{\n			continue;\n		}\n		return enemies + i;\n	} \n	return NULL;\n}\n\nvoid load()\n{\n	player.x = scrWidth/2;\n	player.y = scrHeight/2;\n	player.r = 30;\n	player.moveSpeed = 6;\n	player.sheilds = -1;\n\n	player.gunR = 40;\n}\n\nvoid genEnemy()\n{\n	zomb *newEnemy = GetNextAvailableEnemy();\n\n	newEnemy->r = 30;\n	newEnemy->x = randomNum(0+newEnemy->r, scrWidth-newEnemy->r);\n	newEnemy->y = randomNum(0+newEnemy->r, scrHeight-newEnemy->r);\n	newEnemy->sheilds = -1;\n}\n\nvoid draw()\n{\n	setColour(abs(-player.sheilds), player.sheilds, 0, 255);\n	circle(\"line\", player.x, player.y, player.r);\n	setColour(255, 255, 255, 255);\n	circle(\"line\", player.gunX, player.gunY, 3.5);\n\n\n	int i; \n	// bullets\n	for (i = 0; i <= maxBullets; i++)\n	{\n		if (player.bullets[i].active == true)\n		{\n			setColour(255, 255, 0, 0);\n			pixel(player.bullets[i].x, player.bullets[i].y);\n		}\n	}\n}\n\nvoid logic()\n{\n	player.gunX = cos(player.gunAngle)*player.gunR + player.x;\n	player.gunY = sin(player.gunAngle)*player.gunR + player.y;\n\n	int i;\n	for (i = 0; i < maxBullets; i++)\n	{\n		if (player.bullets[i].active)\n		{\n			player.bullets[i].moveRad += player.bullets[i].moveSpeed;\n			player.bullets[i].x = cos(player.bullets[i].moveAng)*player.bullets[i].moveRad + player.bullets[i].origX;\n			player.bullets[i].y = sin(player.bullets[i].moveAng)*player.bullets[i].moveRad + player.bullets[i].origY;\n\n			if (player.bullets[i].y > scrHeight || player.bullets[i].y < 0 || player.bullets[i].x > scrWidth || player.bullets[i].x < 0)\n			{\n				player.bullets[i].active = false;\n			}\n		}\n	}\n\n	for (i = 0; i < maxEnemy; i++)\n	{\n		if (enemies[i].active)\n		{\n			// Bullet - enemy collisions\n			int j;\n			for (j = 0; j < maxBullets; j++)\n			{\n				if (player.bullets[j].active)\n				{\n					if (pointCircleCollision(player.bullets[j].x, player.bullets[j].y, enemies[i].x, enemies[i].y, enemies[i].r))\n					{\n						enemies[i].sheilds--;\n						player.bullets[j].active = false;\n					}\n				}\n			}\n\n			if (circleCircleCollision(player.x, player.y, player.r, enemies[i].x, enemies[i].y, enemies[i].r))\n			{\n				player.sheilds -= 2;\n				enemies[i].sheilds--;\n			}\n\n			if (enemies[i].sheilds <= -256)\n			{\n				enemies[i].active = false;\n			}\n\n			enemies[i].targAngle = giveAngle(enemies[i].x, enemies[i].y, player.x, player.y);\n			enemies[i].x = cos(enemies[i].targAngle)*enemies[i].moveSpeed + enemies[i].x;\n			enemies[i].y = sin(enemies[i].targAngle)*enemies[i].moveSpeed + enemies[i].y;\n		}\n	}\n}\n\nvoid controls()\n{\n	if (keyInput.a)\n	{\n		player.x -= player.moveSpeed;\n	}\n	if (keyInput.d)\n	{\n		player.x += player.moveSpeed;\n	}\n	if (keyInput.w)\n	{\n		player.y -= player.moveSpeed;\n	}\n	if (keyInput.s)\n	{\n		player.y += player.moveSpeed;\n	}\n\n	if (keyInput.left)\n	{\n		player.gunAngle -= 0.1;\n	}\n	else if (keyInput.right)\n	{\n		player.gunAngle += 0.1;\n	}\n\n	if (keyInput.spacebar)\n	{\n		bullet *newBullet = GetNextAvailableBullet();\n		newBullet->active = true;\n		newBullet->origX = player.gunX;\n		newBullet->origY = player.gunY;\n		newBullet->moveRad = 0;\n\n		int variation, chance;\n		chance = randomNum(0, 8);\n		variation = randomNum(5, 20);\n		switch (chance)\n		{\n			case 0:\n				newBullet->moveAng = player.gunAngle;\n				break;\n			case 1: case 3: case 5: case 7:\n				newBullet->moveAng = player.gunAngle;\n				newBullet->moveAng -= degreesToRadians(variation);\n				break;\n			case 2: case 4: case 6: case 8:\n				newBullet->moveAng = player.gunAngle;\n				newBullet->moveAng += degreesToRadians(variation);\n				break;\n		}\n		newBullet->moveSpeed = randomNum(2, 4);\n		newBullet->x = cos(newBullet->moveAng)*newBullet->moveRad + newBullet->origX;\n		newBullet->y = sin(newBullet->moveAng)*newBullet->moveRad + newBullet->origY;\n	}\n}\n\nint main(int argc, char *argv[])\n{\n	bool fullscreen = false;\n	if (argc == 2)\n	{\n		if (strcmp(argv[1], \"-full\") == 0)\n		{\n			fullscreen = true;\n		}\n	}\n	initWindow(1024, 768, fullscreen, \"test :3\");\n	load();\n	img menuScreen = loadImage(\"./res/menu.bmp\", BMP);\n	while (!keyInput.ESC)\n	{\n		clear();\n		if (level == -1) // death screen\n		{\n\n		}\n		else if (level == 0 ) // menu\n		{\n			drawImage(menuScreen, 2, 2);\n			update();\n			capFrameRate(60);\n		}\n		else if (level > 0) // game\n		{\n			draw();\n			update();\n			controls();\n			logic();\n			capFrameRate(60);\n		}\n	}\n	return 0;\n}",
			"file": "main.c",
			"file_size": 5061,
			"file_write_time": 130220276035119595,
			"settings":
			{
				"buffer_size": 5061,
				"line_ending": "Unix"
			}
		},
		{
			"file": "space.c",
			"settings":
			{
				"buffer_size": 1279,
				"line_ending": "Unix"
			}
		},
		{
			"file": "README",
			"settings":
			{
				"buffer_size": 227,
				"line_ending": "Unix",
				"name": "Space!!! :D"
			}
		},
		{
			"contents": "#include \"QL.h\"\n#include <string.h> // for memset\n\n// #defines -------------------------------------------------------------------- \n#define maxAngle 360\n#define minAngle 0\n#define maxBullets 1500\n#define maxEnemy 20\n\n// Typedef structs & enums -----------------------------------------------------\ntypedef struct \n{\n	bool active;\n	// moving:\n	int origX, origY, x, y;\n	int moveR;\n	float angle;\n	int speed;\n	// damage is directly in realtion to the size of the bullet.\n} bullet;\n\ntypedef struct\n{\n	bool active; // only applicable for enemies :3\n	// moving:\n	int x, y, r; // x, y, radius\n	int moveSpeed; // Move speed\n	// gun:\n	int gunX, gunY, gunRad; // gun x, y, radius\n	float gunAngle; // gun angle\n	float targetAngle; // For the enemy, the angle of the player in relation to the enemy :3\n	bullet bullets[maxBullets]; // array for the bullets\n	// health:\n	int sheilds;\n	// int r, g;\n} entity;\n\ntypedef struct\n{\n	bool active;\n	int x, y, r;\n	int healthToGive; // self explanitory\n} powerup;\n\n// Function declarations, because -fpic -------------------------------------------------------------------- \nint main();\nvoid load();\nvoid draw();\nvoid controls();\nvoid logic();\nbullet *GetNextAvailableBullet(); // Thanks to quin :3\nentity *GetNextAvailableEnemy(); // basically as above but for entities :3\nvoid genEnemy();\nvoid genPowerup();\nbool enemyAlive();\nvoid titleDraw();\nvoid titleUpdate();\nvoid breakDraw();\nvoid breakUpdate();\n\n// Variables ------------------------------------------------------------------ \nint level; int levelScore = 0; int enemyScore = 0; int deathScore = 0;\nentity player;\nentity enemies[maxEnemy];\npowerup OneUp;\nimg menuScreen;\nimg breakScreen;\nbool fullscreen = false;\n\n// -------------------------------------------------------------------- \nint main(int argc, char *argv[])\n{\n	menuScreen = loadImage(\"./res/menu.bmp\", BMP);\n	breakScreen = loadImage(\"./res/break.bmp\", BMP);\n	if ((strcmp(argv[2], \"full\")) == 0)\n	{\n		fullscreen = true;\n	}\n	initWindow(1024, 768, fullscreen, \"Rik0r\");\n	printf(\"blop\");\n	load();\n	printf(\"sqleeeerg\");\n	while(keyInput.ESC != true)\n	{\n		printf(\"quloppity quop\");\n		clear();\n		if (level == 0)\n		{\n			printf(\"plop!\");\n			titleDraw();\n			printf(\"bleaugh\");\n			titleUpdate();\n		}\n		else if (level > 0)\n		{\n			draw();\n			update();\n			controls();\n			logic();\n		}\n		else if (level == -1) // This is the bit inbetween the levels\n		{\n			breakDraw();\n			breakUpdate();\n		}\n		capFrameRate(60); // 60 FPS\n	}\n	return 0;\n}\n\n// loading variables -------------------------------------------------------------------- \nvoid load()\n{\n	player.x = scrWidth/2;\n	player.y = scrHeight/2;\n	player.r = 30;\n	player.moveSpeed = 4;\n	player.gunAngle = 20.0;\n	player.gunRad = 40;\n	player.sheilds = -1;\n}\n\n// boilerplate code -------------------------------------------------------------------- \nbullet *GetNextAvailableBullet()\n{\n	int i;\n	for(i = 0; i < maxBullets; i++) \n	{ \n		if (player.bullets[i].active) \n		{\n			continue;\n		}\n		return player.bullets + i;\n	} \n	return NULL;\n}\n\nentity *GetNextAvailableEnemy()\n{\n	int i;\n	for(i = 0; i < maxEnemy; i++) \n	{ \n		if (enemies[i].active) \n		{\n			continue;\n		}\n		return enemies + i;\n	} \n	return NULL;\n}\n\n\nvoid genEnemy()\n{\n	entity *newEnemy = GetNextAvailableEnemy(); \n\n	newEnemy->active = true; \n	newEnemy->r = 30;\n	newEnemy->x = randomNum(0, scrWidth - newEnemy->r);\n	newEnemy->y = randomNum(0, scrHeight - newEnemy->r);\n	newEnemy->moveSpeed = randomNum(3, 6);\n	newEnemy->sheilds = -1;\n	newEnemy->targetAngle = giveAngle(newEnemy->x, newEnemy->y, player.x, player.x);\n}\n\nvoid genPowerup()\n{\n	OneUp.active = true;\n	OneUp.x = scrWidth/2;\n	OneUp.y = scrHeight/2;\n	OneUp.r = 30;\n	OneUp.healthToGive = randomNum(50, 75);\n}\n\nbool enemyAlive()\n{\n	int i;\n	for (i = 0; i < maxEnemy; i++)\n	{\n		if (enemies[i].active) \n		{\n			return true;\n		}\n	}\n	return false;\n}\n\nvoid loadNextLevel()\n{\n	level++;\n	int i;\n	for (i = 0; i <= level; i++)\n	{\n		genEnemy();\n	}\n}\n\n// mainGame -------------------------------------------------------------------- \nvoid draw()\n{\n	setColour(abs(-player.sheilds), player.sheilds, 0, 255);\n	circle(\"line\", player.x, player.y, player.r);\n	setColour(255, 255, 255, 255);\n	circle(\"line\", player.gunX, player.gunY, 3);\n	int i;\n	// enemy drawing\n	for (i = 0; i <= maxEnemy; i++)\n	{\n		if (enemies[i].active == true)\n		{\n			setColour(abs(-enemies[i].sheilds), enemies[i].sheilds, 0, 255);\n			circle(\"line\", enemies[i].x, enemies[i].y, enemies[i].r);\n		}\n	}\n	// player bullets :3\n	setColour(200, 50, 0, 255);\n	for (i = 0; i <= maxBullets; i++)\n	{\n		if (player.bullets[i].active == true)\n		{\n			pixel(player.bullets[i].x, player.bullets[i].y);\n		}\n	}\n}\n\nvoid controls() // Some input lag as such, but nothing game breaking yet :S\n{\n	// Player movement:\n	if (keyInput.a)\n	{\n		player.x -= player.moveSpeed;\n	}\n	if (keyInput.d)\n	{\n		player.x += player.moveSpeed;\n	}\n	if (keyInput.w)\n	{\n		player.y -= player.moveSpeed;\n	}\n	if (keyInput.s)\n	{\n		player.y += player.moveSpeed;\n	}\n	// Player gun movement:\n	if (keyInput.left)\n	{\n		player.gunAngle -= 6;\n	}\n	if (keyInput.right)\n	{\n		player.gunAngle += 6;\n	}\n\n	if (keyInput.spacebar)\n	{\n		bullet *newBullet = GetNextAvailableBullet(); \n\n		newBullet->active = true; \n		newBullet->origX = player.gunX;\n		newBullet->origY = player.gunY;\n		newBullet->moveR = 0;\n		// rand stuff to allow variance in the bullets :3\n		int chance = randomNum(0, 8);\n		int variation = randomNum(6, 20); // 10 looks nice \n		switch (chance)\n		{\n			case 0:\n				newBullet->angle = player.gunAngle;\n				break;\n\n			case 1 : case 3 : case 5: case 7:\n				newBullet->angle = player.gunAngle;\n				newBullet->angle += variation;\n				break;\n\n			case 2 : case 4 : case 6: case 8:\n				newBullet->angle = player.gunAngle;\n				newBullet->angle -= variation;\n				break;\n\n			default:\n				break;\n		}\n		newBullet->speed = randomNum(20, 40);\n		newBullet->x = cos(degreesToRadians(newBullet->angle))*newBullet->moveR + newBullet->origX;\n		newBullet->y = sin(degreesToRadians(newBullet->angle))*newBullet->moveR + newBullet->origY;\n	}\n\n}\n\nvoid logic()\n{\n	player.gunX = cos(degreesToRadians(player.gunAngle))*player.gunRad + player.x;\n	player.gunY = sin(degreesToRadians(player.gunAngle))*player.gunRad + player.y;\n\n	int i; // moving the player's bullets :3\n	int j;\n	for (i = 0; i < maxBullets; i++)\n	{\n		if (player.bullets[i].active)\n		{\n			player.bullets[i].moveR++;\n			player.bullets[i].x = cos(degreesToRadians(player.bullets[i].angle))*player.bullets[i].moveR + player.bullets[i].origX;\n			player.bullets[i].y = sin(degreesToRadians(player.bullets[i].angle))*player.bullets[i].moveR + player.bullets[i].origY;\n			if (player.bullets[i].y > scrHeight || player.bullets[i].y < 0 || player.bullets[i].x > scrWidth || player.bullets[i].x < 0)\n			{\n				player.bullets[i].active = false;\n			}\n		}\n	}\n\n	// Player death\n	if (player.sheilds < -256)\n	{\n		// Cut to commertial:\n	}\n\n	// Enemies\n	for (i = 0; i < maxEnemy; i++) \n	{\n		if (enemies[i].active == true)\n		{\n			// player - enemy collision\n			if ((circleCircleCollision(player.x, player.y, player.r, enemies[i].x, enemies[i].y, enemies[i].r)) == false)\n			{\n				float angle = giveAngle(enemies[i].x, enemies[i].y, player.x, player.y);\n				player.x = cos(angle)*2 + player.x;\n				player.y = sin(angle)*2 + player.y;\n				player.sheilds--; player.sheilds--;\n				enemies[i].sheilds--;\n			}\n			// enemy death\n			if (enemies[i].sheilds <= -256)\n			{\n				enemies[i].active = false;\n				enemyScore++;\n			}\n			// player bullets - enemy collision\n			int xDelta, yDelta;\n			for (j = 0; j < maxBullets; j++)\n			{\n				if (player.bullets[j].active == true)\n				{\n					xDelta = (player.bullets[j].x - enemies[i].x);\n					yDelta = (player.bullets[j].y - enemies[i].y);\n					if (xDelta*xDelta+yDelta*yDelta <= enemies[i].r*enemies[i].r)\n					{\n						enemies[i].sheilds--;\n						player.bullets[j].active = false;\n					}\n				}\n			}\n			// get the player's angle:\n			enemies[i].targetAngle = giveAngle(enemies[i].x, enemies[i].y, player.x, player.y);\n			// Move the enemy to the player\n			int *x = &enemies[i].x; // Pointers FTW!!!!\n			int *y = &enemies[i].y;\n			float targ = enemies[i].targetAngle;\n			int speed = enemies[i].moveSpeed;\n			*x = cos(targ) * speed/1.1 + *x; // sine and cosine are awesome :3\n			*y = sin(targ) * speed/1.1 + *y;\n		}\n	}\n\n	if (enemyAlive() == false)\n	{\n		level = -1;\n		levelScore++;\n		genPowerup();\n	}\n}\n\n// title -------------------------------------------------------------------- \n\nvoid titleDraw()\n{\n	drawImage(menuScreen, 0, 0);\n}\n\nvoid titleUpdate()\n{\n	if (keyInput.p)\n	{\n		loadNextLevel();\n	}\n}\n\n// break -------------------------------------------------------------------- \n\nvoid breakDraw()\n{\n	drawImage(breakScreen, 0, 0);\n	setColour(abs(-player.sheilds), player.sheilds, 0, 255);\n	circle(\"line\", player.x, player.y, player.r);\n	setColour(255, 255, 255, 255);\n	circle(\"line\", player.gunX, player.gunY, 3);\n	// player bullets :3\n	setColour(200, 50, 0, 255);\n	int i;\n	for (i = 0; i <= maxBullets; i++)\n	{\n		if (player.bullets[i].active == true)\n		{\n			pixel(player.bullets[i].x, player.bullets[i].y);\n		}\n	}\n}\n\nvoid breakUpdate()\n{\n	// Player movement:\n	if (keyInput.a)\n	{\n		player.x -= player.moveSpeed;\n	}\n	if (keyInput.d)\n	{\n		player.x += player.moveSpeed;\n	}\n	if (keyInput.w)\n	{\n		player.y -= player.moveSpeed;\n	}\n	if (keyInput.s)\n	{\n		player.y += player.moveSpeed;\n	}\n	// Player gun movement:\n	if (keyInput.left)\n	{\n		player.gunAngle -= 6;\n	}\n	if (keyInput.right)\n	{\n		player.gunAngle += 6;\n	}\n	if (keyInput.spacebar)\n	{\n		bullet *newBullet = GetNextAvailableBullet(); \n\n		newBullet->active = true; \n		newBullet->origX = player.gunX;\n		newBullet->origY = player.gunY;\n		newBullet->moveR = 0;\n		// rand stuff to allow variance in the bullets :3\n		int chance = randomNum(0, 8);\n		int variation = randomNum(6, 20); // 10 looks nice \n		switch (chance)\n		{\n			case 0:\n				newBullet->angle = player.gunAngle;\n				break;\n\n			case 1 : case 3 : case 5: case 7:\n				newBullet->angle = player.gunAngle;\n				newBullet->angle += variation;\n				break;\n\n			case 2 : case 4 : case 6: case 8:\n				newBullet->angle = player.gunAngle;\n				newBullet->angle -= variation;\n				break;\n\n			default:\n				break;\n		}\n		newBullet->speed = randomNum(20, 40);\n		newBullet->x = cos(degreesToRadians(newBullet->angle))*newBullet->moveR + newBullet->origX;\n		newBullet->y = sin(degreesToRadians(newBullet->angle))*newBullet->moveR + newBullet->origY;\n	}\n	if (keyInput.e)\n	{\n		level = levelScore;\n		loadNextLevel();\n	}\n}",
			"file": "mainOld.c",
			"file_size": 10425,
			"file_write_time": 130219501815728414,
			"settings":
			{
				"buffer_size": 10425,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Makefile",
			"settings":
			{
				"buffer_size": 362,
				"line_ending": "Unix"
			}
		},
		{
			"file": "QL.h",
			"settings":
			{
				"buffer_size": 4886,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<sorceress> 1. compute angle between two bearings\n<sorceress> 2. fix angle if >180 degrees\n<sorceress> 3. compare\n\n\n<Gallefray> sorceress: so the computing of the angle between bearings\n<Gallefray> sorceress: that would be done with atan2?\n<sorceress> no, angle = bearing1 - bearing2\n<Gallefray> sorceress: and how does one get these bearings?\n<sorceress>  enemies[i].targetAngle is one bearing\n<Gallefray> right\n<Gallefray> but where be the other bearing\n<Gallefray> a rand point on the screen?\n<the31> Subtraction isn't quite enough though....\n<sorceress> enemies[i].gunAngle \n<sorceress> the31, see point 2\n<the31> Oh, right, computing angle between includes the \"correction\" in my mind.\n<Gallefray> sorceress: compare?\n<sorceress> well that's where you determine which direction to rotate\n<sorceress> and add or subtract \n<sorceress> 6\n<sorceress> it'll be determined by the sign of the fixed angle\n<Gallefray> sorceress: the sign?\n<sorceress> yes, + or -\n* Gallefray looks up towards the sky for a sign\n<Gallefray> ohhhh",
			"settings":
			{
				"buffer_size": 1025,
				"line_ending": "Unix",
				"name": "<sorceress> 1. compute angle between two bearings"
			}
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"command_palette":
	{
		"height": 272.0,
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Discover Packages"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 125.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/finn/Dropbox/Git_Repo/personal/code/C/LD27/rik0r/mainOld.c",
		"/home/finn/Dropbox/Git_Repo/personal/code/QuackLang/QL_LANG/QL.h",
		"/home/finn/Dropbox/Git_Repo/personal/code/C/QuackLang Proj/galacticRift/main.c",
		"/home/finn/Dropbox/Git_Repo/personal/code/QuackLang/QL_LANG/QL.c",
		"/home/finn/streamTwitch.sh",
		"/home/finn/Dropbox/Git_Repo/personal/code/QuackLang/QL_LANG/QLimage.o",
		"/home/finn/Dropbox/Git_Repo/personal/code/QuackLang/QL_LANG/QLinput.c",
		"/media/KINGSTON/to arch/delta time.txt",
		"/home/finn/Dropbox/Git_Repo/personal/code/QuackLang/QL_LANG/test.c",
		"/media/usb/to arch/delta time.txt",
		"/media/usb/Documents/Code/QuackLang/QL_LANG/QL.c",
		"/home/finn/Documents/rude-love-f4536f333620/src/scripts/boot.lua",
		"/home/finn/Documents/rude-love-f4536f333620/src/modules/timer/sdl/Timer.cpp",
		"/home/finn/Documents/rude-love-f4536f333620/src/scripts/boot.lua.h",
		"/media/usb/boot/bootinst.sh",
		"/media/usb/forge/linux/README.txt",
		"/media/usb/to arch/delta.txt",
		"/media/usb/to arch/float to int.txt",
		"/home/finn/Documents/rude-love-f4536f333620/src/modules/timer/sdl/Timer.h",
		"/home/finn/Dropbox/Git_Repo/professional/game and program development/newPrototypes/space/space - love2D/main.lua",
		"/home/finn/Documents/delta time.txt",
		"/home/finn/Documents/C/curses/roguelike/main.c",
		"/home/oldFinn/ubuntu 12.04 Home/Documents/twitch_stream.sh",
		"/home/finn/Dropbox/Git_Repo/personal/code/C/stuff/numberVar test/main.c",
		"/home/finn/Dropbox/Git_Repo/personal/code/lua/love tests/lineFunc/main.lua",
		"/home/finn/Dropbox/Git_Repo/personal/code/QuackLang/QL_LANG/QL.sublime-project",
		"/home/finn/Dropbox/Git_Repo/professional/game and program development/newPrototypes/botova/main.lua",
		"/home/finn/Desktop/test.lua",
		"/home/finn/.config/sublime-text-2/Packages/Python/Python.sublime-build",
		"/home/finn/.config/sublime-text-2/Packages/Lua/lua.sublime-build",
		"/home/finn/Dropbox/Git_Repo/personal/code/python/tk/pictureit/main.py",
		"/home/finn/Dropbox/Git_Repo/personal/code/python/tk/pictureit/imgFunc.py",
		"/home/finn/Dropbox/Git_Repo/personal/code/python/swissarmyknife.py",
		"/home/finn/Dropbox/Git_Repo/personal/code/python/roguelike.py",
		"/home/finn/Dropbox/Git_Repo/personal/code/python/loop inside a module.py",
		"/home/finn/Dropbox/Git_Repo/personal/code/python/guessinggame.py",
		"/home/finn/Dropbox/Git_Repo/personal/code/python/game_2.py",
		"/home/finn/Dropbox/Git_Repo/personal/code/python/game.py",
		"/home/finn/Dropbox/Git_Repo/personal/code/python/end test.py",
		"/home/finn/Dropbox/Git_Repo/personal/code/python/testy.py",
		"/home/finn/Dropbox/Git_Repo/personal/code/QuackLang/QL_LANG/Makefile",
		"/home/finn/Dropbox/Git_Repo/personal/code/Java/Tyran9000/Makefile",
		"/home/finn/Dropbox/Git_Repo/personal/code/Java/Tyran9000/main.java",
		"/home/finn/.config/sublime-text-2/Packages/Default/Preferences.sublime-settings",
		"/home/finn/.config/sublime-text-2/Packages/User/Java.sublime-settings",
		"/home/finn/Dropbox/Git_Repo/personal/code/Java/Tyran9000_java/Makefile",
		"/home/finn/Dropbox/Git_Repo/personal/code/Java/Tyran9000_java/main.java",
		"/home/finn/Dropbox/Git_Repo/personal/code/processing/Tyrant9000/Tyrant9000.pde",
		"/home/finn/Dropbox/Git_Repo/personal/code/processing/Tyrant9000/Makefile",
		"/home/finn/Dropbox/Git_Repo/personal/code/Java/Makefile",
		"/home/finn/.config/sublime-text-2/Packages/Java/JavaC.sublime-build",
		"/home/finn/Dropbox/Git_Repo/personal/code/Java/test.java",
		"/home/finn/Dropbox/Git_Repo/personal/code/ASL/ASL_LANG/Makefile",
		"/home/finn/Dropbox/Git_Repo/personal/games/love2D/networkingDemo/server_handle.lua",
		"/home/finn/Dropbox/Git_Repo/personal/games/love2D/networkingDemo/server.lua",
		"/home/finn/Dropbox/Git_Repo/personal/games/love2D/networkingDemo/client_connect.lua",
		"/home/finn/Dropbox/Git_Repo/personal/games/love2D/networkingDemo/main.lua",
		"/home/finn/Dropbox/Git_Repo/personal/code/lua/animals program/main.lua",
		"/home/finn/Dropbox/Git_Repo/personal/code/lua/networking/server.lua",
		"/home/finn/Dropbox/Git_Repo/professional/game and program development/newPrototypes/LD26/_mau/main.lua",
		"/home/finn/Dropbox/Git_Repo/personal/code/lua/networking/serverExample.lua",
		"/home/finn/Dropbox/Git_Repo/personal/code/AnjinScriptLang/README.md",
		"/home/finn/Dropbox/S-Anjin/SoN/Codebase/AI-backToback.code",
		"/home/finn/Dropbox/S-Anjin/SoN/Docs/Player AI Notepad.txt",
		"/home/finn/Dropbox/S-Anjin/SoN/what is secret of nihilum.txt",
		"/home/finn/Dropbox/S-Anjin/SoN/Player AI Notepad.txt",
		"/home/finn/Dropbox/S-Anjin/SoN/Dir stucture.txt",
		"/home/finn/Dropbox/Git_Repo/professional/game and program development/finished/Zombie_game/main.lua",
		"/C/Users/Finn/Dropbox/Public/websites/Yet Another Indie Dev/misc/untitled",
		"/home/finn/Dropbox/Public/websites/Yet Another Indie Dev/js/lightbox.js",
		"/home/finn/Dropbox/Public/websites/Yet Another Indie Dev/js/arrays.js",
		"/home/finn/Dropbox/Git_Repo/professional/game and program development/polyhedron design/code/sokoblobR3/main (Gallefray O'leary's conflicted copy 2013-05-20).lua",
		"/home/finn/Dropbox/Git_Repo/professional/game and program development/polyhedron design/code/sokoblobR3/main.lua",
		"/home/finn/.processing/preferences.txt",
		"/home/finn/Dropbox/Git_Repo/professional/game and program development/polyhedron design/code/sokoblobR3/sokoblobR3.sublime-project",
		"/home/finn/Dropbox/Git_Repo/professional/game and program development/polyhedron design/code/sokoblobR3/conf.lua",
		"/home/finn/Dropbox/Git_Repo/professional/game and program development/newPrototypes/CHERUBgamePrototype/singlePlayerGameEng.lua",
		"/home/finn/Dropbox/Git_Repo/professional/game and program development/newPrototypes/CHERUBgamePrototype/main.lua",
		"/home/finn/Dropbox/Git_Repo/personal/code/lua/gam/main.lua",
		"/home/finn/Dropbox/Git_Repo/personal/code/lua/untitled.lua",
		"/home/finn/Dropbox/Git_Repo/professional/game and program development/polyhedron design/code/sokoblobR3/extString.lua",
		"/home/finn/Dropbox/Git_Repo/professional/game and program development/polyhedron design/code/sokoblobR3/old/depCode.lua",
		"/home/finn/Dropbox/Git_Repo/professional/game and program development/polyhedron design/code/sokoblobR3/DesignDoc.txt",
		"/home/finn/Dropbox/Git_Repo/professional/game and program development/polyhedron design/code/sokoblobR3/LOG.txt",
		"/home/finn/Dropbox/Git_Repo/professional/game and program development/polyhedron design/code/sokoblobR3/editSave.lua",
		"/home/finn/Dropbox/Git_Repo/professional/game and program development/polyhedron design/code/sokoblobR3/editor.lua",
		"/C/Documents and Settings/Finn/My Documents/Dropbox/Git_Repo/professional/game and program development/homebrewLibs/extString.lua",
		"/home/finn/Dropbox/Git_Repo/professional/game and program development/polyhedron design/code/sokoblobR3/menu.lua",
		"/C/Documents and Settings/Finn/Desktop/C.sublime-build",
		"/C/Documents and Settings/Finn/My Documents/Dropbox/Git_Repo/professional/game and program development/polyhedron design/code/sokoblobR3/sokoblobR3.sublime-project",
		"/C/Documents and Settings/Finn/My Documents/Dropbox/Git_Repo/professional/game and program development/polyhedron design/code/sokoblobR3/depCode.lua",
		"/C/Documents and Settings/Finn/Desktop/ncursesTest.c",
		"/C/Documents and Settings/Finn/Desktop/Files/roguelike.py/rogue-like.py",
		"/C/Documents and Settings/Finn/Desktop/hello.rs",
		"/C/Documents and Settings/Finn/My Documents/Dropbox/Git_Repo/professional/game and program development/polyhedron design/code/sokoblobR3/levels/user/1.lua",
		"/C/Documents and Settings/Finn/My Documents/Dropbox/Git_Repo/professional/game and program development/polyhedron design/code/sokoblobR3/levels/user/2.lua",
		"/C/Users/Finn/Dropbox/Git_Repo/professional/game and program development/polyhedron design/code/levels/user/1.lua",
		"/C/Documents and Settings/Finn/Desktop/#ludumdareD&D.txt",
		"/C/Documents and Settings/Finn/My Documents/Dropbox/Git_Repo/professional/game and program development/polyhedron design/code/sokoblobR3/version.lua",
		"/C/clean/log/2012-07-21__14h06boot-repair04/2012-07-21__14h06.boot-repair.log.tee",
		"/C/Users/Finn/Dropbox/Git_Repo/professional/game and program development/polyhedron design/code/sokoblobR3/sokoblobR3.sublime-workspace",
		"/C/Documents and Settings/Finn/My Documents/Dropbox/Git_Repo/personal/lua/love tests/mkdirStuff/main.lua",
		"/C/Documents and Settings/Finn/My Documents/Dropbox/Git_Repo/professional/game and program development/polyhedron design/code/sokoblobR3/editorBackup.lua",
		"/C/Documents and Settings/Finn/My Documents/Dropbox/Git_Repo/personal/lua/tablesTest.lua",
		"/C/Documents and Settings/Finn/My Documents/Dropbox/Git_Repo/personal/lua/helloWorld.lua",
		"/C/FPC/2.6.0/bin/i386-win32/fpc.cfg",
		"/C/Documents and Settings/Finn/My Documents/Dropbox/Git_Repo/professional/website design/Polyhedron Design/js/overlay.js",
		"/home/finn/Dropbox/Git_Repo/professional/website design/Polyhedron Design/css/style.css",
		"/home/finn/Dropbox/Git_Repo/professional/website design/Polyhedron Design/about.html",
		"/home/finn/Dropbox/Git_Repo/professional/website design/Polyhedron Design/webdev.html",
		"/home/finn/Dropbox/Git_Repo/professional/website design/Polyhedron Design/games_root.html",
		"/home/finn/Dropbox/Git_Repo/professional/website design/Polyhedron Design/index.html",
		"/C/Documents and Settings/Finn.BERNARD-H5B21OH/Desktop/other stuff/gzdoom-bin-1-5-06/zdoom-Finn.ini",
		"/C/Documents and Settings/Finn.BERNARD-H5B21OH/Desktop/Desktop files/doomrl-win-0996-lq/doomrl-win-0996-lq/config.lua",
		"/C/Documents and Settings/Finn.BERNARD-H5B21OH/My Documents/Dropbox/Git_Repo/professional/website design/tumblr like website/css/tumblr-styles.txt",
		"/C/Documents and Settings/Finn.BERNARD-H5B21OH/My Documents/Dropbox/Git_Repo/professional/website design/tumblr like website/css/fonts.css",
		"/C/Documents and Settings/Finn.BERNARD-H5B21OH/My Documents/GitHub/sokoblob/Lua/gridlocked player/main.lua",
		"/C/Documents and Settings/Finn.BERNARD-H5B21OH/My Documents/Dropbox/Git_Repo/personal/lua/animals program/animals.lua",
		"/C/Documents and Settings/Finn.BERNARD-H5B21OH/My Documents/Dropbox/Git_Repo/personal/lua/animals program/main.lua",
		"/C/Documents and Settings/Finn.BERNARD-H5B21OH/Desktop/gzdoom-bin-1-5-06/zdoom-Finn.ini",
		"/C/Documents and Settings/Finn.BERNARD-H5B21OH/My Documents/Dropbox/Git_Repo/personal/lua/environment.lua",
		"/C/Documents and Settings/Finn.BERNARD-H5B21OH/My Documents/Dropbox/Git_Repo/personal/animals program/animals.lua",
		"/C/Documents and Settings/Finn.BERNARD-H5B21OH/My Documents/Dropbox/Git_Repo/personal/animals program/main.lua",
		"/C/Documents and Settings/Finn.BERNARD-H5B21OH/My Documents/Dropbox/Git_Repo/personal/epicness.lua",
		"/C/Documents and Settings/Finn.BERNARD-H5B21OH/My Documents/Dropbox/Git_Repo/professional/game and program development/Sokoblob/gridlocked player/main.lua",
		"/C/Documents and Settings/Finn.BERNARD-H5B21OH/My Documents/Dropbox/Git_Repo/professional/game and program development/Sokoblob/gridlocked player/depracated_code_graveyard.lua",
		"/C/Documents and Settings/Finn.BERNARD-H5B21OH/My Documents/Dropbox/Git_Repo/professional/game and program development/Sokoblob/gridlocked player/conf.lua",
		"/C/Documents and Settings/Finn.BERNARD-H5B21OH/My Documents/Dropbox/Git_Repo/professional/game and program development/Sokoblob/gridlocked player/classes.lua"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"degreesToRadians(",
			"gunPosR",
			"gun",
			">angle",
			"Angle",
			"angle",
			"exists",
			"1up",
			"targetAngle",
			"enemies[i",
			"player",
			"enemies",
			"i",
			"->",
			"x",
			"player.",
			"player",
			";\n",
			"newBullet",
			"player.bullets",
			"player.bullets[player.bulletCount].",
			"y ",
			"y",
			"player.bulletCount",
			"bulletCount",
			"enemy",
			"player",
			"2",
			"x",
			"0",
			"gy",
			"X",
			"x",
			"X",
			"x",
			"X",
			"x",
			"X",
			"x",
			"gcc",
			"g",
			"p",
			"*",
			", ",
			"g",
			"i",
			"scr",
			"screen",
			"x",
			"y",
			"x",
			"j",
			"i",
			" i",
			"i",
			"surface)",
			"Surface",
			"surface",
			"surface-",
			"Surface",
			"surface",
			"	y",
			"y",
			"x",
			"y",
			"h",
			"\nint ",
			"int",
			"LM",
			"true",
			");\n",
			"// Handled",
			"-Werror",
			"-fpic",
			"-Werror",
			"gcc",
			"QLrand",
			"rand",
			"void",
			"int",
			"(int",
			"size",
			"double ",
			" / scale",
			";\n",
			"//	",
			"    ",
			"        ",
			"   ",
			"        ",
			"       ",
			"      ",
			"     ",
			"    ",
			"   ",
			"int",
			"double",
			"\nint",
			"int s",
			"int",
			"float",
			"printf",
			"1 -",
			"32",
			"scrTransX",
			"../",
			"../examples/test/",
			"../bin/",
			" += 1 * deltaTime",
			"round",
			"previousFPSUpdate",
			"delta",
			"FPSUpdateFreq",
			"Cap",
			"LastUpdate",
			"Update",
			"{\n",
			"previousTime",
			"time2",
			"current",
			"currentTime",
			"time1",
			"// // ",
			"fpsUpdateFrequency",
			"xl",
			"y",
			"Uint8",
			"int"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"entity",
			"player",
			"plyer",
			"entity"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5061,
						"regions":
						{
						},
						"selection":
						[
							[
								4785,
								4785
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2386.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "space.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1279,
						"regions":
						{
						},
						"selection":
						[
							[
								733,
								733
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 421.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "README",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 227,
						"regions":
						{
						},
						"selection":
						[
							[
								227,
								227
							]
						],
						"settings":
						{
							"auto_name": "Space!!! :D",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "mainOld.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10425,
						"regions":
						{
						},
						"selection":
						[
							[
								7670,
								7670
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4747.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 362,
						"regions":
						{
						},
						"selection":
						[
							[
								306,
								306
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "QL.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4886,
						"regions":
						{
						},
						"selection":
						[
							[
								3096,
								3096
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 932.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1025,
						"regions":
						{
						},
						"selection":
						[
							[
								1025,
								1025
							]
						],
						"settings":
						{
							"auto_name": "<sorceress> 1. compute angle between two bearings",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.exec":
	{
		"height": 366.0
	},
	"project": ".rik0r.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"~/Dropbox/Git_Repo/personal/code/QuackLang/QL_LANG/QL.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
